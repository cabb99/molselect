// Selection test cases for molscene selection parser
// Each test is an object with a description and a query string
[
    {"description": "Simple flag: protein", "query": "protein"},
    {"description": "Simple flag: water", "query": "water"},
    {"description": "Simple field: name CA", "query": "name CA"},
    {"description": "Multiple names", "query": "name CA CB"},
    {"description": "Multiple resnames", "query": "resname ALA GLY"},
    {"description": "Residue id", "query": "resid 4"},
    {"description": "Index", "query": "index 5"},
    {"description": "Backbone", "query": "backbone"},
    {"description": "acidic", "query": "acidic"},
    {"description": "All atoms", "query": "all"},
    {"description": "None atoms", "query": "none"},
    {"description": "Waters alias", "query": "waters"},
    {"description": "Is_protein alias", "query": "is_protein"},
    {"description": "Is_water alias", "query": "is_water"},
    {"description": "Everything alias", "query": "everything"},
    {"description": "Nothing alias", "query": "nothing"},
    {"description": "Name with quotes 2", "query": "name \"CA\""},
    {"description": "Name with quotes 3", "query": "name \"CA\" \"CB\" \"CA CB\""},

    // --- Logic and default AND ---
    {"description": "AND logic", "query": "protein and water"},
    {"description": "OR logic", "query": "protein or water"},
    {"description": "NOT logic", "query": "not water"},
    {"description": "Default AND", "query": "not water acidic"},
    {"description": "Default AND with fields", "query": "resname ALA PHE name CA CB"},
    {"description": "Default AND with flags", "query": "acidic calpha"},
    {"description": "Parentheses", "query": "(protein or water) and not acidic"},
    {"description": "Nested NOT", "query": "not not (protein and water)"},
    {"description": "NOT with !", "query": "!protein"},

    // --- Numeric comparisons and ranges ---
    {"description": "Numeric comparison", "query": "mass>12"},
    {"description": "Numeric comparison with AND", "query": "mass>12 and mass<17"},
    {"description": "Range selection", "query": "resid 10 to 20"},
    {"description": "Range selection with AND", "query": "resid 10 to 20 and backbone"},
    {"description": "Python-style range", "query": "resid 1:4"},
    {"description": "Python-style range with step", "query": "resid 1:4:2"},
    {"description": "Negative number range", "query": "x -25 to 25"},
    {"description": "Negative number single", "query": "x -22.542"},
    {"description": "Chained comparison", "query": "-10 <= x < 0"},
    {"description": "Comparison with math", "query": "x ** 2 < 10"},
    {"description": "Comparison with function", "query": "sqrt(sq(x) + sq(y) + sq(z)) < 100"},
    {"description": "Element selection", "query": "element O"},
    {"description": "Mass range float", "query": "mass 5.5 to 12.3"},
    {"description": "Binary selection operator", "query": "resid < 1"},
    {"description": "Binary selection operator (ne)", "query": "resid ne 0"},
    {"description": "Binary selection operator (eq)", "query": "resid eq 1"},
    {"description": "Binary selection operator (ge)", "query": "resid ge 1"},
    {"description": "Binary selection operator (le)", "query": "resid le 1"},
    {"description": "Binary selection operator (gt)", "query": "resid gt 1"},
    {"description": "Binary selection operator (lt)", "query": "resid lt 1"},
    {"description": "Reverse binary selection", "query": "1 == name"},
    {"description": "Reverse binary selection (eq)", "query": "1 eq name"},

    // --- Regular expressions ---
    {"description": "Select atoms with resname matching regex 'S..'", "query": "resname \"S..\""},
    {"description": "Select atoms with name matching regex 'C.*'", "query": "name \"C.*\""},
    {"description": "Select atoms with name matching regex '.*'' (single quote)", "query": "name \".*'\""},
    {"description": "Select atoms with name matching regex 'C(A|B)'", "query": "name \"C(A|B)\""},

    // --- Distance-based selections ---
    {"description": "Within distance", "query": "within 5 of water"},
    {"description": "Exwithin distance", "query": "exwithin 3 of water"},
    {"description": "Within distance of field", "query": "within 5 of name FE"},
    {"description": "Within with parentheses", "query": "within 5 of (backbone or sidechain)"},

    // --- Parentheses and complex logic ---
//     {"description": "Parentheses", "query": "(protein or water) and not acidic"},
    {"description": "Same residue as", "query": "same resid as exwithin 4 of water"},
    {"description": "Same resname as", "query": "same resname as (protein within 6 of water)"},
    {"description": "Complex logic", "query": "protein or water or all"},
    {"description": "Nested bool", "query": "nothing and water or all"},
    {"description": "Nested bool with parens", "query": "nothing and (water or all)"},
    {"description": "Quotes test 1", "query": "name CA and resname ALA"},
    {"description": "Quotes test 2", "query": "name \"CA\" and resname ALA"},
    {"description": "In operator with resname", "query": "resname ALA ASP GLU"},
    {"description": "In operator with resid", "query": "resid 100 101 102"},

    // --- Complex selections ---
    {"description": "Complex selection", "query": "protein and (resname ALA or resname GLY) and not water"},
//     {"description": "Complex selection with parentheses", "query": "(protein or water) and not acidic"},
    {"description": "Complex selection with regex", "query": "resname =~ \"A.*\" and name =~ \"C.*\""},
    {"description": "Complex selection with distance", "query": "protein within 5 of (resname ALA or resname GLY)"},
    {"description": "Complex selection with function", "query": "sqrt(x**2 + y**2 + z**2) < 10"},

    // --- Math ---
//     {"description": "Math with functions", "query": "sqrt(x**2 + y**2 + z**2) < 10"},
    {"description": "Math with abs", "query": "abs(x) < 5"},
    {"description": "Math with log", "query": "log(x) > 0"},
    {"description": "Math with exp", "query": "exp(x) < 100"},
    {"description": "Math with sin", "query": "sin(x) > 0.5"},
    {"description": "Math with cos", "query": "cos(x) < 0.5"},
    {"description": "Math with tan", "query": "tan(x) > 1"},
    {"description": "Complex math with functions", "query": "sqrt(z^3-sin(x*y)^2) < 10"},
    {"description": "Complex comparison", "query": "(1*1+1-1) < (1*x+2-2) < (3//3*3)"},

    // --- test_flags ---
//     {"description": "Select none flag", "query": "none"},
//     {"description": "Select all atoms flag", "query": "all"},
//     {"description": "Select acidic atoms flag", "query": "acidic"},
    {"description": "Select acyclic atoms flag", "query": "acyclic"},
    {"description": "Select aliphatic atoms flag", "query": "aliphatic"},
    {"description": "Select aromatic atoms flag", "query": "aromatic"},
    {"description": "Select at flag", "query": "at"},
    {"description": "Select basic atoms flag", "query": "basic"},
    {"description": "Select buried atoms flag", "query": "buried"},
    {"description": "Select cg flag", "query": "cg"},
    {"description": "Select charged atoms flag", "query": "charged"},
    {"description": "Select cyclic atoms flag", "query": "cyclic"},
    {"description": "Select heme flag", "query": "heme"},
    {"description": "Select hydrophobic atoms flag", "query": "hydrophobic"},
    {"description": "Select ion flag", "query": "ion"},
    {"description": "Select large atoms flag", "query": "large"},
    {"description": "Select lipid flag", "query": "lipid"},
    {"description": "Select medium atoms flag", "query": "medium"},
    {"description": "Select neutral atoms flag", "query": "neutral"},
    {"description": "Select nucleic atoms flag", "query": "nucleic"},
    {"description": "Select nucleotide atoms flag", "query": "nucleotide"},
    {"description": "Select nucleobase flag", "query": "nucleobase"},
    {"description": "Select nucleoside flag", "query": "nucleoside"},
    {"description": "Select polar atoms flag", "query": "polar"},
//     {"description": "Select protein atoms flag", "query": "protein"},
    {"description": "Select stdaa flag", "query": "stdaa"},
    {"description": "Select nonstdaa flag", "query": "nonstdaa"},
    {"description": "Select purine flag", "query": "purine"},
    {"description": "Select pyrimidine flag", "query": "pyrimidine"},
    {"description": "Select small atoms flag", "query": "small"},
    {"description": "Select sugar flag", "query": "sugar"},
    {"description": "Select surface atoms flag", "query": "surface"},
//     {"description": "Select water atoms flag", "query": "water"},
    {"description": "Select hetero atoms flag", "query": "hetero"},
    {"description": "Select hetatm flag", "query": "hetatm"},
    {"description": "Select calpha atoms flag", "query": "calpha"},
//     {"description": "Select backbone atoms flag", "query": "backbone"},
    {"description": "Select backbonefull atoms flag", "query": "backbonefull"},
    {"description": "Select sidechain atoms flag", "query": "sidechain"},
    {"description": "Select carbon atoms flag", "query": "carbon"},
    {"description": "Select hydrogen atoms flag", "query": "hydrogen"},
    {"description": "Select noh atoms flag", "query": "noh"},
    {"description": "Select nitrogen atoms flag", "query": "nitrogen"},
    {"description": "Select oxygen atoms flag", "query": "oxygen"},
    {"description": "Select sulfur atoms flag", "query": "sulfur"},
    {"description": "Select extended atoms flag", "query": "extended"},
    {"description": "Select helix atoms flag", "query": "helix"},
    {"description": "Select helix310 atoms flag", "query": "helix310"},
    {"description": "Select turn atoms flag", "query": "turn"},
    {"description": "Select bridge atoms flag", "query": "bridge"},
    {"description": "Select bend atoms flag", "query": "bend"},
    {"description": "Select coil atoms flag", "query": "coil"},
    // --- test_without_and ---
    {"description": "Select coil and protein without explicit AND", "query": "coil protein"},
    {"description": "Select sidechain, sc, and protein without explicit AND", "query": "sidechain sc protein"},
    {"description": "Select bbfull and bb without explicit AND", "query": "bbfull bb"},
    {"description": "Select charged and basic in parentheses without explicit AND", "query": "(charged basic)"},
    {"description": "Select protein and nucleic in parentheses without explicit AND", "query": "(protein nucleic)"},
    {"description": "Select noh, hetero, and water without explicit AND", "query": "noh hetero water"},
    {"description": "Select ca and occupancy > 0 without explicit AND", "query": "ca occupancy > 0"},
    {"description": "Select ca and occupancy - 0 > 0 without explicit AND", "query": "ca occupancy - 0 > 0"},
    {"description": "Select ca and occupancy - 0 > 0 + 0 without explicit AND", "query": "ca occupancy - 0 > 0 + 0"},
    {"description": "Select noh, hetero, and (water) without explicit AND", "query": "noh hetero (water)"},
    {"description": "Select noh, hetero, and not (water) without explicit AND", "query": "noh hetero not (water)"},
    {"description": "Select (water) and hetero without explicit AND", "query": "(water) hetero"},
    {"description": "Select ca and abs(beta) = beta + abs(0) without explicit AND", "query": "ca abs(beta) = beta + abs(0)"},

    // --- test_string ---
    {"description": "Select atoms with name P", "query": "name P"},
    {"description": "Select atoms with names P and CA", "query": "name P CA"},
    {"description": "Select atoms with name `A 1` (quoted)", "query": "name `A 1`"},
    {"description": "Select chain C", "query": "chain C"},
    {"description": "Select chain x (should be empty)", "query": "chain x"},
    {"description": "Select chains x and y (should be empty)", "query": "chain x y"},
    {"description": "Select chains x, y, z (should be empty)", "query": "chain x y z"},
    {"description": "Select chains x, y, z, C", "query": "chain x y z C"},
    {"description": "Select chains C and D", "query": "chain C D"},
    {"description": "Select chain CD (should be empty)", "query": "chain CD"},
    {"description": "Select resname DG", "query": "resname DG"},
    {"description": "Select resnames DG and ALA", "query": "resname DG ALA"},
    {"description": "Select altloc A (should be empty)", "query": "altloc A"},
    {"description": "Select altloc _ (all atoms)", "query": "altloc _"},
    {"description": "Select secondary structure H (helix)", "query": "secondary H"},
    {"description": "Select secondary structures H and E", "query": "secondary H E"},
    {"description": "Select secondary structure _ (coil)", "query": "secondary _"},
    {"description": "Select segment _ (all atoms)", "query": "segment _"},

    // --- test_integer ---
    {"description": "Select atoms with indices 10, 20, 10000", "query": "index 10 20 10000"},
    {"description": "Select atoms with serial 0 (should be empty)", "query": "serial 0"},
    {"description": "Select atoms with serials 1 and 2", "query": "serial 1 2"},
    {"description": "Select atoms with resnum 0 (should be empty)", "query": "resnum 0"},
    {"description": "Select atoms with resnums 100 and 105", "query": "resnum 100 105"},
    {"description": "Select atoms with resid 0 (should be empty)", "query": "resid 0"},
    {"description": "Select atoms with resids 100 and 105", "query": "resid 100 105"},
    {"description": "Select atoms with resid 100 A 105", "query": "resid 100 A 105"},
    {"description": "Select atoms with fragindex 0 (should be empty)", "query": "fragindex 0"},
    {"description": "Select atoms with fragment 0 (should be empty)", "query": "fragment 0"},
    // --- test_range ---
    {"description": "Select atoms with index 0:10 (range)", "query": "index 0:10"},
    {"description": "Select atoms with index 0 to 10 (range)", "query": "index 0to10"},
    {"description": "Select atoms with serial 0:10:2 (range with step)", "query": "serial 0:10:2"},
    {"description": "Select atoms with serial 0:10:10 (range with large step, likely empty)", "query": "serial 0:10:10"},
    {"description": "Select atoms with resnum 10 to 15 (range)", "query": "resnum 10to15"},
    {"description": "Select atoms with resnum 10:16:1 (range)", "query": "resnum 10:16:1"},
    {"description": "Select atoms with resnum -3:16:1 (range with negative start)", "query": "resnum `-3:16:1`"},
    {"description": "Select atoms with resid 10 to 15 (range)", "query": "resid 10to15"},
    {"description": "Select atoms with resid 10:16:1 (range)", "query": "resid 10:16:1"},
    {"description": "Select atoms with x -10 to 20 (range)", "query": "x `-10:20`"},
    {"description": "Select atoms with x 0:20:1 (range, likely empty)", "query": "x 0:20:1"},
    // --- test_float ---
    {"description": "Select atoms with beta values 5.0, 41.15, 11.85", "query": "beta 5.0 41.15 11.85"},
    {"description": "Select atoms with occupancy 1.0", "query": "occupancy 1.0"},
    {"description": "Select atoms with x coordinate 6.665", "query": "x 6.665"},
    {"description": "Select atoms with y coordinates 69.99 and 13.314", "query": "y 69.99 13.314"},
    {"description": "Select atoms with z coordinates 115.246 and 45.784", "query": "z 115.246 45.784"},
    {"description": "Select atoms with charge 0 (should be empty)", "query": "charge 0"},
    {"description": "Select atoms with mass 1 (should be empty)", "query": "mass 1"},
    {"description": "Select atoms with radius 0 (should be empty)", "query": "radius 0"},
    {"description": "Select atoms with beta '1.' (quoted, should be empty)", "query": "beta \"1.\""},
    // --- test_comparisons ---
    {"description": "Select atoms where x = -51.659", "query": "x = -51.659"},
    {"description": "Select atoms where x != -51.659", "query": "x != -51.659"},
    {"description": "Select atoms where z >= 82.813", "query": "z >= 82.813"},
    {"description": "Select atoms where z < 82.813", "query": "z < 82.813"},
    {"description": "Select atoms where beta > 10", "query": "beta > 10"},
    {"description": "Select atoms where beta < 10", "query": "beta < 10"},
    {"description": "Select atoms where occupancy > 0.999999", "query": "occupancy > 0.999999"},
//     {"description": "Select atoms where -10 <= x < 0 (chained comparison)", "query": "-10 <= x < 0"},
    // --- test_operation ---
//     {"description": "Select atoms where x ** 2 < 10 (power operation)", "query": "x ** 2 < 10"},
    {"description": "Select atoms where x ** 2 ** 2 ** 2 < 10 (nested power)", "query": "x ** 2 ** 2 ** 2 < 10"},
    {"description": "Select atoms where x ** (+2 ** (+2 ** +2)) < 10 (power with unary plus)", "query": "x ** (+2 ** (+2 ** +2)) < 10"},
    {"description": "Select atoms where occupancy % 2 == 1 (modulo operation)", "query": "occupancy % 2 == 1"},
    {"description": "Select atoms where x**2 + y**2 + z**2 < 10000 (sum of squares)", "query": "x**2 + y**2 + z**2 < 10000"},

    // --- test_function ---
    {"description": "Select atoms where sqrt(x**2 + y**2 + z**2) < 100 (distance from origin)", "query": "sqrt(x**2 + y**2 + z**2) < 100"},
    {"description": "Select atoms where sqrt(x**2 + y**2 + z**2) == (x**2 + y**2 + z**2) ** 0.5 (equivalent expressions)", "query": "sqrt(x**2 + y**2 + z**2) == (x**2 + y**2 + z**2) ** 0.5"},
    {"description": "Select atoms where beta % 3 < 1 (modulo with function)", "query": "beta % 3 < 1"},
    {"description": "Select atoms where beta % 4 % 3 < 1 (nested modulo)", "query": "beta % 4 % 3 < 1"},
    {"description": "Select atoms where ceil(beta) == 10 (ceiling function)", "query": "ceil(beta) == 10"},
    {"description": "Select atoms where floor(beta) == 10 (floor function)", "query": "floor(beta) == 10"},
    {"description": "Select atoms where abs(x) == sqrt(sq(x)) (absolute value and square root)", "query": "abs(x) == sqrt(sq(x))"},
    {"description": "Select atoms where sq(x-5)+sq(y+4)+sq(z) > sq(100) (sum of squares)", "query": "sq(x-5)+sq(y+4)+sq(z) > sq(100)"},
    // --- test_composite ---
    {"description": "Select chain x y z C and x 10 (composite selection)", "query": "chain x y z C and x 10"},
    {"description": "Select resnum 1 and 2 (composite selection)", "query": "resnum `1` `2`"},
    {"description": "Select same residue as within 4 of resname SAH (composite selection)", "query": "same residue as within 4 of resname SAH"},
    {"description": "Select name CA and same residue as within 4 of resname SAH (composite selection)", "query": "name CA and same residue as within 4 of resname SAH"},
    {"description": "Select water and within 5 of not protein (composite selection)", "query": "water and within 5 of not protein"},
    {"description": "Select backbone and sqrt((x - 25)**2 + (y - 74)**2 + (z - 13)**2) <= 500 (composite selection)", "query": "backbone and sqrt((x - 25)**2 + (y - 74)**2 + (z - 13)**2) <= 500"},
    {"description": "Select (not resname SAH) and (protein and name CA) or (nucleic and name P) (composite selection)", "query": "(not resname SAH) and (protein and name CA) or (nucleic and name P)"},
    {"description": "Select protein and (backbone or name H) (composite selection)", "query": "protein and (backbone or name H)"},
    {"description": "Select protein and name CA CB and same residue as ((x+21.2)**2 + (y-35.9)**2 + (z-80.0)**2)**0.5 < 10 (composite selection)", "query": "protein and name CA CB and same residue as ((x+21.2)**2 + (y-35.9)**2 + (z-80.0)**2)**0.5 < 10"},
    // --- test_within ---
    {"description": "Select atoms within 10 of index 0", "query": "within 10 of index 0"},
    {"description": "Select atoms exwithin 100 of index 0", "query": "exwithin 100 of index 0"},
    {"description": "Select atoms exwithin 4 of resname SAH", "query": "exwithin 4 of resname SAH"},
    {"description": "Select (within 4 of water) and not water", "query": "(within 4 of water) and not water"},
    {"description": "Select atoms within 5 of within 5 of within 5 of index 0", "query": "within 5 of within 5 of within 5 of index 0"},
    {"description": "Select atoms exwithin 5 of exwithin 5 of exwithin 5 of index 0", "query": "exwithin 5 of exwithin 5 of exwithin 5 of index 0"},
    {"description": "Select atoms within 100 of index 10000 (likely empty)", "query": "within 100 of index 10000"},

    // --- test_sameas ---
    {"description": "Select same residue as index 0", "query": "same residue as index 0"},
    {"description": "Select same chain as index 0", "query": "same chain as index 0"},
    {"description": "Select same segment as index 0", "query": "same segment as index 0"},
    {"description": "Select same residue as resname DG ALA", "query": "same residue as resname DG ALA"},
    {"description": "Select same chain as chain C", "query": "same chain as chain C"},
    {"description": "Select same residue as chain X (should be empty)", "query": "same residue as chain X"},
    {"description": "Select same residue as same residue as same residue as index 0", "query": "same residue as same residue as same residue as index 0"},

    // --- test_regexp ---
//     {"description": "Select atoms with resname matching regex 'S..'", "query": "resname \"S..\""},
//     {"description": "Select atoms with name matching regex 'C.*'", "query": "name \"C.*\""},
//     {"description": "Select atoms with name matching regex '.*'' (single quote)", "query": "name \".*'\""},
//     {"description": "Select atoms with name matching regex 'C(A|B)'", "query": "name \"C(A|B)\""},
    // --- test_specialchar ---
    {"description": "Select atoms with altloc as a space character", "query": "altloc ` `"},
    {"description": "Select atoms with names A and CA using backticks", "query": "name A` `CA`"},
    {"description": "Select atoms with name `A` using backticks (should be empty)", "query": "name `A``"},
    {"description": "Select atoms with z coordinate +100.291 using backticks", "query": "z `+100.291`"},
    // --- test_logical ---
    {"description": "Select atoms with name CA and name CA (redundant AND)", "query": "name CA and name CA"},
    {"description": "Select atoms with name CA or name CA (redundant OR)", "query": "name CA or name CA"},
    {"description": "Select atoms with index 0 or index 1", "query": "index 0 or index 1"},
    {"description": "Select atoms with not not not not index 1", "query": "not not not not index 1"},
    {"description": "Select atoms with index 0 or index 1 or index 2", "query": "index 0 or index 1 or index 2"},
    {"description": "Select atoms with index 0 or index 1 or index 2 or index 4", "query": "index 0 or index 1 or index 2 or index 4"},
    {"description": "Select atoms with index 0 and index 1 (should be empty)", "query": "index 0 and index 1"},
    {"description": "Select atoms with index < 50 and index < 5 (should be index < 5)", "query": "index < 50 and index < 5"},
    {"description": "Select atoms with index < 50 and index < 25 and index < 5", "query": "index < 50 and index < 25 and index < 5"},
    {"description": "Select atoms with index < 5 and index < 25 and index < 50", "query": "index < 5 and index < 25 and index < 50"},
    {"description": "Select atoms with index 0 to 5 and index 0 to 25 and index 0 to 50", "query": "index 0 to 5 and index 0 to 25 and index 0 to 50"},
    {"description": "Select atoms with index < 5 and index < 25 and index < 50 or index < 50 or index < 5", "query": "index < 5 and index < 25 and index < 50 or index < 50 or index < 5"},
    // --- test_kwargs ---
    {"description": "Select atoms within 100 of origin (origin as np.zeros(3))", "query": "within 100 of origin"},
//     {"description": "Select atoms within 100 of origin (origin as np.zeros((1, 3)))", "query": "within 100 of origin"},
//     {"description": "Select atoms within 100 of origin (origin as np.zeros((10, 3)))", "query": "within 100 of origin"},
//     {"description": "Select atoms within 100 of origin (origin as np.zeros((50, 3)))", "query": "within 100 of origin"},
    // --- test_equivalent ---
//     {"description": "Select chain C (equivalent to not not chain C)", "query": "chain C"},
//     {"description": "Select chain C (equivalent to not not not not chain C)", "query": "chain C"},
//     {"description": "Select nucleic (equivalent to nucleoside or nucleotide or nucleobase)", "query": "nucleic"},
    // --- test_userdata ---
    // {"description": "Select atoms where temp < 10 (user data, equivalent to beta < 10)", "query": "temp < 10"},
    // {"description": "Select atoms where temp < 10 and chain D (user data)", "query": "temp < 10 and chain D"},
    // {"description": "Select atoms where oc10 - 9 == 1 (user data, equivalent to occupancy 1)", "query": "oc10 - 9 == 1"},
//     {"description": "Select atoms where temp < 10 (user data, equivalent to temp + oc10 < 20)", "query": "temp < 10"},
//     {"description": "Select chain C (synonym: chid C)", "query": "chain C"},
//     {"description": "Select chains C and D (synonym: chid C D)", "query": "chain C D"},
    // --- test_sequence ---
    {"description": "Select sequence al (should be empty)", "query": "sequence al"},
    {"description": "Select sequence A (equivalent to resname ALA)", "query": "sequence A"},
    {"description": "Select sequence MIEIK (equivalent to resindex 25 to 29)", "query": "sequence MIEIK"},
    {"description": "Select sequence VLNAL (equivalent to resindex 175 to 179)", "query": "sequence VLNAL"},
    {"description": "Select sequence FKPY (equivalent to resindex 348 to 351)", "query": "sequence FKPY"},
    {"description": "Select sequence 'SS.' (equivalent to resindex 344 to 346)", "query": "sequence \"SS.\""},
    {"description": "Select sequence 'S[A-Z]{2}G' (equivalent to resindex 109 to 112 267 to 270 276 to 279)", "query": "sequence \"S[A-Z]{2}G\""},
    {"description": "Select sequence 'S.S.S' (should be empty)", "query": "sequence \"S.S.S\""},
    {"description": "Select sequence '.' (all amino acids)", "query": "sequence \".\""},
    // --- test_docexamples ---
    {"description": "Select atoms with serials 1, 2, 3 (doc example)", "query": "serial 1 2 3"},
    {"description": "Select atoms with serials 1 to 10 (doc example)", "query": "serial 1 to 10"},
    {"description": "Select atoms with serials 1:10:2 (doc example)", "query": "serial 1:10:2"},
    {"description": "Select atoms with serial < 10 (doc example)", "query": "serial < 10"},
    {"description": "Select atoms with beta 555.55 (doc example, should be empty)", "query": "beta 555.55"},
    {"description": "Select atoms with beta 1 to 500 (doc example)", "query": "beta 1 to 500"},
    {"description": "Select atoms with beta 1:500 (doc example)", "query": "beta 1:500"},
    {"description": "Select atoms with beta < 500 (doc example)", "query": "beta < 500"},
    {"description": "Select atoms with resnum 120A 120B (doc example, should be empty)", "query": "resnum 120A 120B"},
    {"description": "Select atoms with icode A (doc example, should be empty)", "query": "icode A"},
    {"description": "Select atoms with icode _ (doc example, all atoms)", "query": "icode _"},
    {"description": "Select atoms with charge 1 (doc example, all atoms)", "query": "charge 1"},
    {"description": "Select atoms with abs(charge) == 1 (doc example, all atoms)", "query": "abs(charge) == 1"},
    {"description": "Select atoms with charge < 0 (doc example, should be empty)", "query": "charge < 0"},
    {"description": "Select atoms with 0 < mass < 500 (doc example)", "query": "0 < mass < 500"},
    {"description": "Select atoms with abs(mass) <= mass <= 10 (doc example)", "query": "abs(mass) <= mass <= 10"},
    // --- VMD selection examples ---
//     {"description": "VMD: name CA", "query": "name CA"},
    {"description": "VMD: resid 35", "query": "resid 35"},
//     {"description": "VMD: name CA and resname ALA", "query": "name CA and resname ALA"},
//     {"description": "VMD: backbone", "query": "backbone"},
    {"description": "VMD: not protein", "query": "not protein"},
    {"description": "VMD: protein (backbone or name H)", "query": "protein (backbone or name H)"},
    {"description": "VMD: name 'A 1'", "query": "name 'A 1'"},
    {"description": "VMD: name 'A *'", "query": "name 'A *'"},
//     {"description": "VMD: name \"C.*\"", "query": "name \"C.*\""},
    {"description": "VMD: mass < 5", "query": "mass < 5"},
    {"description": "VMD: numbonds = 2", "query": "numbonds = 2"},
    {"description": "VMD: abs(charge) > 1", "query": "abs(charge) > 1"},
    {"description": "VMD: x < 6 and x > 3", "query": "x < 6 and x > 3"},
    {"description": "VMD: sqr(x-5)+sqr(y+4)+sqr(z) > sqr(5)", "query": "sqr(x-5)+sqr(y+4)+sqr(z) > sqr(5)"},
//     {"description": "VMD: within 5 of name FE", "query": "within 5 of name FE"},
    {"description": "VMD: exwithin 3 of protein", "query": "exwithin 3 of protein"},
    {"description": "VMD: protein within 5 of nucleic", "query": "protein within 5 of nucleic"},
    {"description": "VMD: same resname as (protein within 5 of nucleic)", "query": "same resname as (protein within 5 of nucleic)"},
    {"description": "VMD: protein sequence \"C..C\"", "query": "protein sequence \"C..C\""},
    {"description": "VMD: name eq $atomname", "query": "name eq $atomname"},
    // --- VMD keyword examples ---
//     {"description": "VMD keyword: all", "query": "all"},
//     {"description": "VMD keyword: none", "query": "none"},
//     {"description": "VMD keyword: name", "query": "name CA"},
    {"description": "VMD keyword: type", "query": "type CA"},
//     {"description": "VMD keyword: index", "query": "index 5"},
    {"description": "VMD keyword: serial", "query": "serial 1"},
    {"description": "VMD keyword: atomicnumber", "query": "atomicnumber 6"},
    {"description": "VMD keyword: element", "query": "element C"},
//     {"description": "VMD keyword: altloc", "query": "altloc _"},
    {"description": "VMD keyword: chain", "query": "chain A"},
    {"description": "VMD keyword: residue", "query": "residue 10"},
//     {"description": "VMD keyword: protein", "query": "protein"},
//     {"description": "VMD keyword: nucleic", "query": "nucleic"},
//     {"description": "VMD keyword: backbone", "query": "backbone"},
//     {"description": "VMD keyword: sidechain", "query": "sidechain"},
//     {"description": "VMD keyword: water", "query": "water"},
    {"description": "VMD keyword: fragment", "query": "fragment 1"},
    {"description": "VMD keyword: pfrag", "query": "pfrag 1"},
    {"description": "VMD keyword: nfrag", "query": "nfrag 1"},
    {"description": "VMD keyword: sequence", "query": "sequence ALA"},
    {"description": "VMD keyword: numbonds", "query": "numbonds 2"},
    {"description": "VMD keyword: resname", "query": "resname ALA"},
//     {"description": "VMD keyword: resid", "query": "resid 35"},
    {"description": "VMD keyword: segname", "query": "segname X"},
    {"description": "VMD keyword: x", "query": "x 10"},
    {"description": "VMD keyword: y", "query": "y 10"},
    {"description": "VMD keyword: z", "query": "z 10"},
    {"description": "VMD keyword: radius", "query": "radius 1.5"},
    {"description": "VMD keyword: mass", "query": "mass 12"},
    {"description": "VMD keyword: charge", "query": "charge -1"},
    {"description": "VMD keyword: beta", "query": "beta 10"},
    {"description": "VMD keyword: occupancy", "query": "occupancy 1"},
    // {"description": "VMD keyword: user", "query": "user 0.5"},
//     {"description": "VMD keyword: at", "query": "at"},
//     {"description": "VMD keyword: acidic", "query": "acidic"},
//     {"description": "VMD keyword: acyclic", "query": "acyclic"},
//     {"description": "VMD keyword: aliphatic", "query": "aliphatic"},
    {"description": "VMD keyword: alpha", "query": "alpha"},
    {"description": "VMD keyword: amino", "query": "amino"},
//     {"description": "VMD keyword: aromatic", "query": "aromatic"},
//     {"description": "VMD keyword: basic", "query": "basic"},
//     {"description": "VMD keyword: bonded", "query": "bonded"}, #Not used to favor prody's "bonded n to selection"
//     {"description": "VMD keyword: buried", "query": "buried"},
//     {"description": "VMD keyword: cg", "query": "cg"},
//     {"description": "VMD keyword: charged", "query": "charged"},
//     {"description": "VMD keyword: cyclic", "query": "cyclic"},
//     {"description": "VMD keyword: hetero", "query": "hetero"},
//     {"description": "VMD keyword: hydrogen", "query": "hydrogen"},
//     {"description": "VMD keyword: large", "query": "large"},
//     {"description": "VMD keyword: medium", "query": "medium"},
//     {"description": "VMD keyword: neutral", "query": "neutral"},
//     {"description": "VMD keyword: polar", "query": "polar"},
//     {"description": "VMD keyword: purine", "query": "purine"},
//     {"description": "VMD keyword: pyrimidine", "query": "pyrimidine"},
//     {"description": "VMD keyword: small", "query": "small"},
//     {"description": "VMD keyword: surface", "query": "surface"},
    {"description": "VMD keyword: alpha_helix", "query": "alpha_helix"},
    {"description": "VMD keyword: pi_helix", "query": "pi_helix"},
    {"description": "VMD keyword: helix_3_10", "query": "helix_3_10"},
//     {"description": "VMD keyword: helix", "query": "helix"},
    {"description": "VMD keyword: extended_beta", "query": "extended_beta"},
    {"description": "VMD keyword: bridge_beta", "query": "bridge_beta"},
    {"description": "VMD keyword: sheet", "query": "sheet"},
//     {"description": "VMD keyword: turn", "query": "turn"},
//     {"description": "VMD keyword: coil", "query": "coil"},
    {"description": "VMD keyword: structure", "query": "structure H"},
    {"description": "VMD keyword: phi", "query": "phi -60"},
    {"description": "VMD keyword: psi", "query": "psi -45"},
//     {"description": "VMD keyword: within", "query": "within 5 of name FE"},
//     {"description": "VMD keyword: exwithin", "query": "exwithin 3 of protein"},
//     {"description": "VMD keyword: same", "query": "same resname as (protein within 5 of nucleic)"},
    {"description": "VMD keyword: ufx", "query": "ufx 0.1"},
    {"description": "VMD keyword: ufy", "query": "ufy 0.1"},
    {"description": "VMD keyword: ufz", "query": "ufz 0.1"},
    // {"description": "VMD keyword: vol0", "query": "vol0 0.5"},
    // {"description": "VMD keyword: interpvol0", "query": "interpvol0 0.5"},
    // --- VMD short circuiting examples ---
    {"description": "VMD short circuit: protein within 5 of resid 1", "query": "protein within 5 of resid 1"},
    {"description": "VMD short circuit: (within 5 of resid 1) and protein", "query": "(within 5 of resid 1) and protein"},
    // --- VMD quoting examples ---
    {"description": "VMD quoting: resname 'A 1'", "query": "resname 'A 1'"},
    {"description": "VMD quoting: name 'O5*'", "query": "name 'O5*'"},
    {"description": "VMD quoting: segname 'A *'", "query": "segname 'A *'"},
    {"description": "VMD quoting: name O5'", "query": "name O5'"},
    {"description": "VMD quoting: segname 'x'", "query": "segname 'x'"},
    {"description": "VMD quoting: name 'O5\\''", "query": "name 'O5\\''"},
//     {"description": "VMD quoting: name \"C.*\"", "query": "name \"C.*\""},
    {"description": "VMD quoting: segname \".*[0-9]+.*\"", "query": "segname \".*[0-9]+.*\""},
    {"description": "VMD quoting: resname \"A.*\" GLY \".*T\"", "query": "resname \"A.*\" GLY \".*T\""},
    {"description": "VMD quoting: name \"Na\\+\"", "query": "name \"Na\\+\""},
//     {"description": "VMD quoting: name CA CB", "query": "name CA CB"},
    {"description": "VMD quoting: name \"CA|CB\"", "query": "name \"CA|CB\""},
    {"description": "VMD quoting: name \"C[AB]\"", "query": "name \"C[AB]\""},
//     {"description": "VMD quoting: name \"C(A|B)\"", "query": "name \"C(A|B)\""},
    // --- VMD comparison and regex examples ---
//     {"description": "VMD comparison: mass < 5", "query": "mass < 5"},
    {"description": "VMD comparison: name eq CA", "query": "name eq CA"},
    {"description": "VMD comparison: 'CA' =~ \"C.*\"", "query": "'CA' =~ \"C.*\""},
    {"description": "VMD comparison: segname =~ \"VP[1-4]\"", "query": "segname =~ \"VP[1-4]\""},
    {"description": "VMD comparison: sqr(x-3)+sqr(y-4)+sqr(z+5) <= sqr(5)", "query": "sqr(x-3)+sqr(y-4)+sqr(z+5) <= sqr(5)"},
    // --- VMD sequence examples ---
    {"description": "VMD sequence: sequence APD", "query": "sequence APD"},
    {"description": "VMD sequence: sequence \"C..C\"", "query": "sequence \"C..C\""},
    {"description": "VMD sequence: sequence AATCGGAT", "query": "sequence AATCGGAT"},
    // --- VMD within/same examples ---
//     {"description": "VMD within: within 5 of name FE", "query": "within 5 of name FE"},
    {"description": "VMD within: protein within 2 of nucleic", "query": "protein within 2 of nucleic"},
    {"description": "VMD within: same residue as (protein within 2 of nucleic)", "query": "same residue as (protein within 2 of nucleic)"}
]