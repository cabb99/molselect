// --------------------------
// Imports & Ignored
// --------------------------
%import common.CNAME
%import common.NUMBER
%import common.ESCAPED_STRING
%import common.WS_INLINE
%ignore WS_INLINE

// Ignore Python-style comments
COMMENT: /#[^\n]*/
%ignore COMMENT

SINGLE_QUOTED_STRING : /'(?:\\.|[^'\\])*'/
TRIPLE_SINGLE_QUOTED_STRING : /'''(?:[\s\S])*?'''/
TRIPLE_DOUBLE_QUOTED_STRING : /"""(?:[\s\S])*?"""/

// ---------------------------
// LOGICAL OPERATIONS (COMBINES MASKS)
// ---------------------------
// (OR < XOR < AND < NOT)

start: expr

?expr: or_expr

?or_expr: xor_expr
        | or_expr _OR_OP xor_expr               -> or_

?xor_expr: and_expr
         | xor_expr _XOR_OP and_expr            -> xor_

?and_expr: not_expr
         | and_expr _AND_OP? not_expr           -> and_

?not_expr: _NOT_OP not_expr                     -> not_
         | atom

?atom: "(" expr ")"
     | selection

// --------------------------
// Selection Grammar (CREATES MASKS)
// --------------------------

?selection: bool_keyword
          | comparison_selection
          | property_selection
          | regex_selection
          | within_selection
          | bonded_selection
          | sequence_selection
          | same_selection
          | "(" selection ")"

//Range selection
comparison_selection: math_or_number_expr (comparison_op math_or_number_expr)+

?math_or_number_expr: math_expr | number_expr | STRING_VALUE

// List-or-range
property_selection: math_expr _IN? property_item+                        

?property_item: range_value
              | regex_value
              | quoted_string_value
              | string_value
              | number_expr
              | "`" property_item "`"

range_value: number_expr _TO number_expr     
           | number_expr _COLON number_expr  
           | number_expr _COLON number_expr _COLON number_expr
           | string_value _TO string_value
           | "`" range_value "`"

// Regex selection
regex_selection: math_expr _REGEXP_OP regex_value

// Within selection
within_selection: within_op number_expr _OF expr

// Bonded selection
bonded_selection: bonded_op number_expr _TO expr

// Sequence selection
sequence_selection: _SEQUENCE regex_value
                  | _SEQUENCE quoted_string_value
                  | _SEQUENCE string_value

// Same selection
same_selection: _SAME selection_keyword _AS expr

// Selection values
string_value: STRING_VALUE
quoted_string_value: SINGLE_QUOTED_STRING | TRIPLE_SINGLE_QUOTED_STRING
regex_value: ESCAPED_STRING | TRIPLE_DOUBLE_QUOTED_STRING

//───────────────────────────────────────────────────────────────────────────────
// Purely arithmetic sub-grammar (CREATES NUMBERS):
//───────────────────────────────────────────────────────────────────────────────
?number_expr: num_sum

?num_sum: num_sum _PLUS num_term                -> add
        | num_sum _MINUS num_term               -> sub
        | num_term

?num_term: num_term _TIMES num_factor           -> mul
         | num_term _DIV num_factor             -> truediv
         | num_term _INTEGER_DIV num_factor     -> floordiv
         | num_term _MOD num_factor             -> mod
         | num_factor

?num_factor: num_factor _POW num_primary        -> pow
           | num_primary

?num_primary: NUMBER                            -> number
            | constant                          -> const
            | _MINUS num_primary                -> neg
            | _PLUS num_primary                 -> pos
            | function_name "(" number_expr ")" -> func
            | "(" number_expr ")"         



//───────────────────────────────────────────────────────────────────────────────
// 2) Mixed “math_expr”: must contain at least one selection_keyword (CREATES ARRAYS)
//───────────────────────────────────────────────────────────────────────────────
?math_expr: math_sum

// After the first token, *any* operator can mix with either sel_operand or pure number_expr:

?math_sum: math_sum _PLUS math_term             -> add
         | math_sum _MINUS math_term            -> sub
         | math_sum _PLUS num_term              -> add
         | math_sum _MINUS num_term             -> sub
         | num_sum _PLUS math_term              -> add
         | num_sum _MINUS math_term             -> sub
         | math_term

?math_term: math_term _TIMES math_factor        -> mul
          | math_term _DIV math_factor          -> truediv
          | math_term _INTEGER_DIV math_factor  -> floordiv
          | math_term _MOD math_factor          -> mod
          | math_term _TIMES num_factor         -> mul
          | math_term _DIV num_factor           -> truediv
          | math_term _INTEGER_DIV num_factor   -> floordiv
          | math_term _MOD num_factor           -> mod
          | num_term _TIMES math_factor         -> mul
          | num_term _DIV math_factor           -> truediv
          | num_term _INTEGER_DIV math_factor   -> floordiv
          | num_term _MOD math_factor           -> mod
          | math_factor

?math_factor: math_factor _POW math_primary     -> pow
            | math_factor _POW num_primary      -> pow
            | num_factor _POW math_primary      -> pow
            | math_primary

?math_primary: selection_keyword
             | _MINUS math_primary              -> neg
             | _PLUS math_primary               -> pos
             | function_name "(" math_expr ")"  -> func
             | "(" math_expr ")"

// --------------------------
// Boolean Keywords 
// --------------------------

// Universal keywords
ALL        : "all" | "everything"                 
NONE       : "none" | "nothing"                   

?bool_universal: ALL | NONE 

<<MACROS>>

MACRO: "@" CNAME

bool_macro: MACRO -> macro_selection

bool_keyword: bool_universal | bool_macro | <<MACROS_NAMES>>

// --------------------------
// Tokens
// --------------------------

// Regex match
_REGEXP_OP.1 : "=~"                 

// Not
_NOT_OP    : "not"  | /!(?!=)/        

// LOGICAL OPERATORS
_OR_OP     : "or"   | "||" | "|"
_AND_OP    : "and"  | "&&" | "&"
_XOR_OP    : "xor"         

?logical_op: _OR_OP | _AND_OP | _XOR_OP | _NOT_OP

// COMPARISON OPERATORS
LE        : "<="   | "le"     
GE        : ">="   | "ge"     
EQ        : "=="   | "=" | "eq" 
LT        : "<"    | "lt"       
GT        : ">"    | "gt"       
NE        : "!="   | "ne"       
?comparison_op: LE | GE | EQ | LT | GT | NE

// RANGE OPERATORS
     
_COLON     : ":"           
COMMA     : ","           
?range_op : _TO | _COLON | COMMA

// COMPARISON TOKENS
_SAME      : "same"
_AS        : "as"
WITHIN    : "within"
EXWITHIN  : "exwithin"
_OF        : "of"
BONDED    : "bonded"
EXBONDED  : "exbonded"
_TO      : "to"    
_SEQUENCE  : "sequence"
_IN : "in"

?within_op: WITHIN | EXWITHIN
?bonded_op : BONDED | EXBONDED

// MATH OPERATORS
_PLUS        : "+"           
_MINUS       : "-"           
_TIMES       : /\*(?!\*)/           
_DIV         : "/(?!/)"           
_INTEGER_DIV : "//"          
_MOD         : "%"           
_POW         : "**" | "^"
?math_op : _PLUS | _MINUS | _TIMES | _DIV | _INTEGER_DIV | _MOD | _POW

?operation_keyword: math_op
                | logical_op
                | comparison_op
                | range_op
                | _REGEXP_OP
                | _NOT_OP


// --------------------------
// Selection Keywords
// --------------------------

<<KEYWORDS>>

VARIABLE  : "$"CNAME

select_variable: VARIABLE -> var_sel

selection_keyword: select_variable | <<KEYWORDS_NAMES>>

// ----------------------------
// MATH KEYWORDS
// ----------------------------

// Math function names (as terminals, so they're easy to recognize)
SIN     : "sin"
COS     : "cos"
TAN     : "tan"
ASIN    : "asin" | "arcsin"
ACOS    : "acos" | "arccos"
ATAN    : "atan" | "arctan"
EXP     : "exp"
LOG     : "log" | "ln"
LOG10   : "log10"
SQRT    : /sqrt\b/
SQUARE  : /sq(?!rt)\b/ | /sqr\b/ | /square\b/
ABS     : "abs"
FLOOR   : "floor"
CEIL    : "ceil"
COSH    : "cosh"
SINH    : "sinh"
TANH    : "tanh"

?function_name: SIN | COS | TAN | ASIN | ACOS | ATAN | EXP | LOG | LOG10 | SQRT | SQUARE | ABS | CEIL | FLOOR | SINH | COSH | TANH

// --------------------------
// Constants
// --------------------------

PI      : "pi"
E       : "e"

?constant: PI | E

//--------------------------
// Values
// --------------------------

STRING_VALUE.-10: <<LAST_TOKEN>>   // Last resort for anything not matched by other rules (most greedy)

