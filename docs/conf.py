# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

# Incase the project was not installed
import os
import sys
sys.path.insert(0, os.path.abspath('..'))

import molselect


# -- Project information -----------------------------------------------------

project = 'MolSelect'
copyright = ("2025, Carlos Bueno. Project structure based on the "
             "Computational Molecular Science Python Cookiecutter version 1.11")
author = 'Carlos Bueno'

# The short X.Y version
version = ''
# The full version, including alpha/beta/rc tags
release = ''


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autosummary',
    'sphinx.ext.autodoc',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx.ext.extlinks',
    'sphinx_design',
    'sphinx_copybutton',    
]


autosummary_generate = True
napoleon_google_docstring = False
napoleon_use_param = False
napoleon_use_ivar = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'default'


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'pydata_sphinx_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'molselectdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'molselect.tex', 'MolSelect Documentation',
     'molselect', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'molselect', 'MolSelect Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'molselect', 'MolSelect Documentation',
     author, 'molselect', 'A cross-platform extensible parser for VMD-like molecular selections',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------




# -- Generate keyword reference table --------------------------------------
import os
import json
# Create keywords table:
def generate_keyword_table_rst(app):
    # 1) locate your JSON (adjust path as needed)
    src = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir,  'molselect', 'data', "keywords.json"))
    # 2) output file under docs/
    dst = os.path.join(os.path.dirname(__file__), "keywords.rst")

    data = json.load(open(src, encoding="utf-8"))
    lines = []
    lines.append("Keyword Reference")
    lines.append("=================")
    lines.append("")
    for category, kwmap in data["keywords"].items():
        # section header
        lines.append(category)
        lines.append("-" * len(category))
        # keep this blank line indented so it's still inside the list-table directive block
        lines.append("   ")
        lines.append(".. list-table::")
        lines.append("   :header-rows: 1")
        lines.append("   :widths: 15 8 15 20 40")
        # again, indent the blank line
        lines.append("   ")
        # multi-line header
        lines.append("   * - **Keyword**")
        lines.append("     - **Type**")
        lines.append("     - **Synonyms**")
        lines.append("     - **Short description**")
        lines.append("     - **Description**")
        # each keyword
        for name, meta in kwmap.items():
            syn = ", ".join(meta.get("synonyms", [])) or "—"
            short = meta.get("short", "").replace("\n", " ")
            desc  = " ".join(meta.get("description", [])).replace("\n", " ")
            lines.append(f"   * - ``{name}``")
            lines.append(f"     - ``{meta['type']}``")
            lines.append(f"     - {syn}")
            lines.append(f"     - {short}")
            lines.append(f"     - {desc}")
        lines.append("")
    # write out
    with open(dst, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))

def generate_keyword_rst(app):
    import os, json

    src = os.path.abspath(os.path.join(
        os.path.dirname(__file__),
        os.pardir,
        'molselect', 'data',
        'keywords.json'
    ))
    dst = os.path.join(os.path.dirname(__file__), 'keywords.rst')
    data = json.load(open(src, encoding='utf-8'))

    lines = [
        "Keyword Reference",
        "=================",
        "",
    ]

    for category, kwmap in data["keywords"].items():
        # Category heading
        lines.append(category)
        lines.append('-' * len(category))
        lines.append('')

        # Start glossary
        lines.append('.. glossary::')
        lines.append('')

        for name, meta in kwmap.items():
            # build "[syn1, syn2]" or empty
            syns = meta.get("synonyms", [])
            syns = [f'*{syn}*' for syn in syns]
            syn_str = f"{', '.join(syns)}" if syns else ''

            # Term line: name + synonyms + (type)
            if syn_str:
                lines.append(f"    **{name}**, {syn_str} (``{meta['type']}``)")
            else:
                lines.append(f"    **{name}** (``{meta['type']}``)")

            # Description paragraphs
            for i, paragraph in enumerate(meta.get("description", [])):
                if i == 0:
                    lines.append(f"        {paragraph}")
                else:
                    lines.append(f"        {paragraph}")

            # Add extra info in a block, only if present
            if 'units' in meta or 'example' in meta:
                if 'units' in meta:
                    lines.append("")
                    units = meta['units']
                    if any(x in units for x in ['^', '·', '/', '(', ')', 'Å']):
                        lines.append(f"        **Units:** :math:`{units}`")
                    else:
                        lines.append(f"        **Units:** {units}")
                if 'example' in meta:
                    lines.append("")
                    lines.append(f"        **Example:** ``{name} {meta['example']}``")
                lines.append("")

            lines.append('')  # blank line between entries

        lines.append('')  # extra blank after category

    with open(dst, 'w', encoding='utf-8') as f:
        f.write('\n'.join(lines))

# -- Generate macros reference table --------------------------------------
def generate_macros_rst(app):
    import os, json
    src = os.path.abspath(os.path.join(
        os.path.dirname(__file__),
        os.pardir,
        'molselect', 'data',
        'macros.json'
    ))
    dst = os.path.join(os.path.dirname(__file__), 'macros.rst')
    data = json.load(open(src, encoding='utf-8'))

    lines = [
        "Macro Reference",
        "===============",
        "",
    ]

    macros = data.get("macros", {})
    for category, macro_map in macros.items():
        lines.append(category)
        lines.append('-' * len(category))
        lines.append('')
        lines.append('.. glossary::')
        lines.append('')
        for name, meta in macro_map.items():
            # Macro name and synonyms
            syns = meta.get("synonyms", [])
            syn_str = f", {', '.join([f'*{s}*' for s in syns])}" if syns else ''
            lines.append(f"    **{name}**{syn_str}")
            # Description (can be str or list)
            desc = meta.get("description", "")
            if isinstance(desc, list):
                for d in desc:
                    # Convert markdown-style links to reStructuredText
                    lines.append(f"        {d}")
            elif desc:
                # Convert markdown-style links to reStructuredText
                lines.append(f"        {desc}")
            # Short
            # if meta.get("short"):
            #     lines.append(f"        **Short:** {meta['short']}")
            # Definition
            if meta.get("definition"):
                lines.append("")
                lines.append(f"        **Definition:** ``{meta['definition']}``")
            # Example
            if 'example' in meta:
                lines.append("")
                lines.append(f"        **Example:** ``{meta['example']}``")
            lines.append("")
        lines.append("")

    with open(dst, 'w', encoding='utf-8') as f:
        f.write('\n'.join(lines))

# Connect the function to the Sphinx app       
def setup(app):
    # run once, before docs build
    app.connect("builder-inited", generate_keyword_rst)
    app.connect("builder-inited", generate_macros_rst)